1)

var maxProduct = 0;
for (var i = 0; i < numberString.length - 4; i++) {
    var product = 1;
    for (var j = 0; j < 5; j++) {
        product *= parseInt(numberString[i + j]);
    }
    if (product > maxProduct) {
        maxProduct = product;
    }
}
console.log(maxProduct);
</script>


2)
< script >

var triangle = [
    [75],
    [95, 64],
    [17, 47, 82],
    [18, 35, 87, 10],
    [20, 04, 82, 47, 65],
    [19, 01, 23, 75, 03, 34],
    [88, 02, 77, 73, 07, 63, 67],
    [99, 65, 04, 28, 06, 16, 70, 92],
    [41, 41, 26, 56, 83, 40, 80, 70, 33],
    [41, 48, 72, 33, 47, 32, 37, 16, 94, 29],
    [53, 71, 44, 65, 25, 43, 91, 52, 97, 51, 14],
    [70, 11, 33, 28, 77, 73, 17, 78, 39, 68, 17, 57],
    [91, 71, 52, 38, 17, 14, 91, 43, 58, 50, 27, 29, 48],
    [63, 66, 04, 68, 89, 53, 67, 30, 73, 16, 69, 87, 40, 31],
    [04, 62, 98, 27, 23, 09, 70, 98, 73, 93, 38, 53, 60, 04, 23]
    ];

var sumOfMaxRoutes = [];

var getSumOfMaxRoute = function(startingRow, startingCol) {
    sumOfMaxRoutes[startingRow] = sumOfMaxRoutes[startingRow] || [];

    if (sumOfMaxRoutes[startingRow][startingCol]) {
        return sumOfMaxRoutes[startingRow][startingCol];
    }

    var sum = triangle[startingRow][startingCol];

    if (startingRow == triangle.length - 1) {
        return sum;
    }

    //add the highest child
    var leftPath = getSumOfMaxRoute(startingRow + 1, startingCol);
    var rightPath = 0;
    if (startingCol < triangle[startingRow+1].length - 1) {
        rightPath = getSumOfMaxRoute(startingRow + 1, startingCol + 1);
    }

    sum += leftPath > rightPath ? leftPath : rightPath;
    sumOfMaxRoutes[startingRow][startingCol] = sum;

    return sum;
}

console.log(getSumOfMaxRoute(0, 0));
</script>

3)
< script >

var getSumOfDiagonals = function(gridSize){
    var maxNumber = gridSize * gridSize;
    var count = 0;
    var increment = 1;
    var incrementCounter = 0;
    for(var i = 1; i <= maxNumber; i++){
        count += i;
        i += increment;
        incrementCounter = (incrementCounter + 1) % 4;
        if(incrementCounter == 0){
            increment += 2;
        }
    }
    
    return count;
}


console.log(getSumOfDiagonals(5));
console.log(getSumOfDiagonals(1001));

</script>
4)
var panDigitals = [];

outerloop:
for(var number = 9999; number > 0; number--){
    var numString = '' + number;
    var multiplier = 1;
    while(numString.length < 9){
        multiplier++;
        numString += (number * multiplier);
    }
    
    if(numString.length == 9){
        for(var digit = 1; digit < 10; digit++){
            if(numString.indexOf('' + digit) == -1){
                continue outerloop;
            }
        }
        panDigitals.push(numString);
    }
}
panDigitals.sort();
console.log(panDigitals);
console.log(panDigitals[panDigitals.length-1]); 
5)
var count = 0;
	var lastL = 1;
	for(var L = 10; L < 10000000; L++) {
		var b1 = (-4 + 2*Math.sqrt(4-5+5*L*L)) / 5;
		var b2 = (4 + 2*Math.sqrt(4-5+5*L*L)) / 5;
	
		if(b1 == Math.floor(b1)) {	
			console.log(count+1,L,b1,L/lastL);
			count++;
			lastL = L;
		}
		
		if(b2 == Math.floor(b2)) {	
			console.log(count+1,L,b2,L/lastL);
			count++;
			lastL = L;
		}
	}
	
	// Follow the pattern :/
	
	var L = 17;
	var sum = L;
	for(var i = 1; i < 12; i++) {
		L *= 17.94427190998;
		L = Math.floor(L);
		console.log(L);
		sum+=L;
	}
	console.log(sum); 
